openapi: 3.0.0
info:
  version: '2.3.1'
  title: Kytos Circuit Provisioning
  description: Kytos NApp for provisioning of SDN circuits.
servers:
  - url: http://localhost:8181/api/kytos/mef_eline
    description: Local server (uses test data)
paths:
  /v2/evc/:
    get:
      summary: List all circuits stored.
      description: List all circuits stored.
      operationId: list_circuits
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Circuit'

    post:
      summary: Creates a new circuit
      operationId: create_circuit
      requestBody:
        description: Creates a new circuit based on the endpoints and
          constraints given.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCircuit'
      responses:
        '201':
          description: EVC created. The circuit ID is being returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  circuit_id: # the unique circuit id
                    type: string
        '400':
          description: Request do not have a JSON or JSON format do not match
            the EVC object or EVC already exists.
        '409':
          description: Not Acceptable. This evc already exists.

  /v2/evc/{circuit_id}:
    get:
      summary: Get details of a circuit
      description: Get the details of a single circuit
      operationId: get_circuit
      parameters:
        - name: circuit_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Circuit'
        '400':
          description: Circuit id not found.

    patch:
      summary: Update a circuit
      description: Update a circuit based on payload. The EVC required
        attributes (name, uni_a, uni_z) can't be updated.
      operationId: update
      parameters:
        - name: circuit_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update a circuit based on the circuit_id and payload given
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Circuit'
      responses:
        '200':
          description: OK
        '404':
          description: Circuit id not found.
        '400':
          description: Bad request.

    delete:
      summary: Delete a circuit
      description: The flows are removed from the switches, and then the EVC is
        disabled.
      operationId: delete
      parameters:
        - name: circuit_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

  /v2/evc/schedule/:
    get:
      summary: List all schedules stored for all circuits .
      description: List all schedules stored for all circuits .
      operationId: list_circuit_schedules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CircuitScheduleList'

    post:
      summary: Creates a new circuit schedule
      operationId: create_schedule
      requestBody:
        description: Creates a new circuit schedule.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCircuitSchedule'
      responses:
        '201':
          description: Schedule created. The Schedule object is being returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircuitSchedule'
        '400':
          description: Request do not have a JSON or JSON format do not match
            the Schedule object or some parameters are missing.
        '404':
          description: Circuit id not found.
        '403':
          description:  Can´t change data. Circuit is deleted and archived.
        '409':
          description: Not Acceptable.

  /v2/evc/schedule/{schedule_id}:
    patch:
      summary: Update a circuit schedule
      description: Update a circuit schedule based on payload. The schedule_id are required.
      operationId: update_schedule
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update a circuit schedule based on the schedule_id and payload given
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CircuitSchedule'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request. Invalid format or some parameters are missing.
        '403':
          description:  Can´t change data. Circuit is deleted and archived.
        '404':
          description: Schedule id not found.
    delete:
      summary: Delete a circuit schedule
      description: Delete a schedule from a circuit.
      operationId: delete_schedule
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description:  Can´t change data. Circuit is deleted and archived.
        '404':
          description:  Schedule id not found.
components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    NewCircuit: # Can be referenced via '#/components/schemas/NewCircuit'
      type: object
      required:
        - name
        - uni_a
        - uni_z
      properties:
        name:
          type: string
        uni_a:
          $ref: '#/components/schemas/Endpoint'
        uni_z:
          $ref: '#/components/schemas/Endpoint'
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        bandwidth:
          type: integer
          format: int64
        primary_links:
          type: array
          items:
            $ref: '#/components/schemas/Path'
        backup_links:
          type: array
          items:
            $ref: '#/components/schemas/Path'
        circuit_scheduler:
          type: array
          items:
            $ref: '#/components/schemas/CircuitSchedule'

    Endpoint: # Can be referenced via '#/components/schemas/Endpoint'
      type: object
      required:
        - interface_id
      properties:
        interface_id:
          type: string
          format: '00:00:00:00:00:00:00:00:0'
        tag:
          $ref: '#/components/schemas/Tag'

    Link: # Can be referenced via '#/components/schemas/Link'
      type: object
      required:
        - id
        - endpoint_a
        - endpoint_b
      properties:
        id:
          type: string
        endpoint_a:
          $ref: '#/components/schemas/Endpoint'
        endpoint_b:
          $ref: '#/components/schemas/Endpoint'

    Path: # Can be referenced via '#/components/schemas/Path'
      type: object
      required:
        - endpoints
      properties:
        id:
          type: integer
          format: int32
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'

    Circuit: # Can be referenced via '#/components/schemas/Circuit'
      type: object
      required:
        - id
        - name
        - uni_a
        - uni_z
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        uni_a:
          $ref: '#/components/schemas/Endpoint'
        uni_z:
          $ref: '#/components/schemas/Endpoint'

        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time

        bandwidth:
          type: integer
          format: int64

        primary_links:
          type: array
          items:
            $ref: '#/components/schemas/Path'
        backup_links:
          type: array
          items:
            $ref: '#/components/schemas/Path'

        current_path:
          $ref: '#/components/schemas/Path'
        primary_path:
          $ref: '#/components/schemas/Path'
        backup_path:
          $ref: '#/components/schemas/Path'

        dynamic_backup_path:
          type: boolean
        creation_time:
          type: string
          format: date-time

        enabled:
          type: boolean

        active:
          type: boolean

        owner:
          type: string
        priority:
          type: integer
          format: int32

        circuit_scheduler:
          type: array
          items:
            $ref: '#/components/schemas/CircuitSchedule'
        request_time:
          type: string
          format: date-time

    Tag: # Can be referenced via '#/components/schemas/Tag'
      type: object
      required:
        - tag_type
        - value
      properties:
        tag_type:
          type: string
        value:
          type: string

    CircuitSchedule: # Can be referenced via '#/components/schemas/CircuitSchedule'
      type: object
      properties:
        id:
          type: integer
          format: int32
        date:
          type: string
          format: date-time
        interval:
          type: string
        frequency:
          type: string
        action:
          type: string

  #------------------------------------------
  # Reusable schemas for request or responses
  #------------------------------------------
    NewCircuitSchedule:
      type: object
      properties:
        circuit_id:
          type: integer
          format: int32
        schedule: {
            "$ref": "#/components/schemas/CircuitSchedule"
        }
    CircuitScheduleList:
      type: object
      properties:
        circuit_id:
          type: integer
          format: int32
        schedule_id:
          type: integer
          format: int32
        schedule: {
            "$ref": "#/components/schemas/CircuitSchedule"
        }